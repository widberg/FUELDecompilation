// Make sure you are editing "EngineConfig.h.in" and not "EngineConfig.h" as it is autogenerated and any changes will be lost.

#pragma once

#ifndef CONFIG_H
#define CONFIG_H

#ifdef __cplusplus
#include <cstddef> // offsetof
#else
#include <stddef.h> // offsetof
#endif

#cmakedefine01 USE_SECUROM
#cmakedefine01 USE_RUNNING_CHECK

#define CAT2(x, y) x ## y
#define CAT(x, y) CAT2(x, y)
#define STR2(x) #x
#define STR(x) STR2(x)

// Rename a symbol without undefining it
#define SYMBOLSYMBOL(old, new) __pragma(comment(user, "symbolsymbol;" __FILE__ ";" STR(__LINE__) ";" old ";" new))

// Rename an address without undefining it
#define ADDRESSSYMBOL(address, symbol) __pragma(comment(user, "addresssymbol;" __FILE__ ";" STR(__LINE__) ";" #address ";" symbol))

// Rename a symbol and undefine the original
#define DELINKFUNCTION(address, ...) __pragma(comment(user, "delinkfunction;" __FILE__ ";" STR(__LINE__) ";" __FUNCSIG__ ";" __FUNCDNAME__ ";" #address ";" #__VA_ARGS__))

// Rename a vftable and undefine the original
#define ADDRESSVFTABLE(address, class) __pragma(comment(user, "addressvftable;" __FILE__ ";" STR(__LINE__) ";" #address ";" #class))

// Rename a `virtual void function(void)` without undefining it
#define ADDRESSVF(address, class, function) __pragma(comment(user, "addressvf;" __FILE__ ";" STR(__LINE__) ";" #address ";" #class ";" #function))

// Undefine an address
#define UNDEFADDRESS(address) __pragma(comment(user, "undefaddress;" __FILE__ ";" STR(__LINE__) ";" #address))

#define STATIC_ASSERT(expr, ...) enum { CAT(__STATIC_ASSERT_FAILED, __COUNTER__) = 1 / (int)(!!(expr)) }

#define STATIC_ASSERT_SIZE(expr, size, ...) STATIC_ASSERT(sizeof(expr) == size, __VA_ARGS__)

#define STATIC_ASSERT_OFFSET(type, member, offset, ...) STATIC_ASSERT(offsetof(type, member) == offset, __VA_ARGS__)

#endif // CONFIG_H
